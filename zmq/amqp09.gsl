.-
.-    Copyright (c) 2007-2008 FastMQ Inc.
.-
.-    This file is part of 0MQ.
.-
.-    0MQ is free software; you can redistribute it and/or modify
.-    it under the terms of the GNU General Public License as published by
.-    the Free Software Foundation; either version 3 of the License, or
.-    (at your option) any later version.
.-
.-    0MQ is distributed in the hope that it will be useful,
.-    but WITHOUT ANY WARRANTY; without even the implied warranty of
.-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.-    GNU General Public License for more details.
.-
.-    You should have received a copy of the GNU General Public License
.-    along with this program.  If not, see <http://www.gnu.org/licenses/>.
.-
.-    Usage: gsl -script:amqp09.gsl amqp0-9.xml
.-
.macro add_field_format ()
.   type = amqp->domain (name = field.domain).type
.   if type = "bit"
            bool \
.   elsif type = "octet"
            uint8_t \
.   elsif type = "short"
            uint16_t \
.   elsif type = "long"
            uint32_t \
.   elsif type = "longlong"
            uint64_t \
.   elsif type = "timestamp"
            uint64_t \
.   elsif type = "shortstr"
            const i_amqp09::shortstr_t \
.   elsif type = "longstr"
            const i_amqp09::longstr_t \
.   elsif type = "table"
            const i_amqp09::field_table_t &\
.   endif
.endmacro
.
.macro get_padding ()
.   if bit_offset > 0
.       bit_offset = 0
                offset += sizeof (uint8_t);
.   endif
.endmacro
.
.macro get_field ()
.   type = amqp->domain (name = field.domain).type
.   if type <> "bit"
.       get_padding ()
.   endif
.   if bit_offset = 8
.       bit_offset = 0
.   endif
.   if type = "bit"
                bool $(field.name:c) = args [offset] & (0x1 << $(bit_offset));
.       bit_offset = bit_offset + 1
.   elsif type = "octet"
                uint8_t $(field.name:c) = get_uint8 (args + offset);
                offset += sizeof (uint8_t);
.   elsif type = "short"
                uint16_t $(field.name:c) = get_uint16 (args + offset);
                offset += sizeof (uint16_t);
.   elsif type = "long"
                uint32_t $(field.name:c) = get_uint32 (args + offset);
                offset += sizeof (uint32_t);
.   elsif type = "longlong"
                uint64_t $(field.name:c) = get_uint64 (args + offset);
                offset += sizeof (uint64_t);
.   elsif type = "timestamp"
                uint64_t $(field.name:c) = get_uint64 (args + offset);
                offset += sizeof (uint64_t);
.   elsif type = "shortstr"
                i_amqp09::shortstr_t $(field.name:c);
                $(field.name:c).size = get_uint8 (args + offset);
                offset += sizeof (uint8_t);
                $(field.name:c).data = (char*) (args + offset);
                offset += $(field.name:c).size;
.   elsif type = "longstr"
                i_amqp09::longstr_t $(field.name:c);
                $(field.name:c).size = get_uint32 (args + offset);
                offset += sizeof (uint32_t);
                $(field.name:c).data = (void*) (args + offset);
                offset += $(field.name:c).size;
.   elsif type = "table"
                i_amqp09::field_table_t $(field.name:c);
                get_field_table (args, args_size, offset, $(field.name:c));
.   else
                assert (0);
.endif
.endmacro
.
.macro put_padding ()
.   if bit_offset > 0
.       bit_offset = 0
);
    offset += sizeof (uint8_t);
.   endif
.endmacro
.
.macro put_field ()
.   type = amqp->domain (name = field.domain).type
.   if type <> "bit"
.       put_padding ()
.   endif
.   if type = "bit"
.       if bit_offset = 8
;
.           bit_offset = 0
.       endif
.       if bit_offset = 0
    args [offset] = (
.       else
 |
.       endif
        (($(field.name:c)_ ? 1 : 0) << $(bit_offset))\
.       bit_offset = bit_offset + 1
.   elsif type = "octet"
    put_uint8 (args + offset, $(field.name:c)_);
    offset += sizeof (uint8_t);
.   elsif type = "short"
    put_uint16 (args + offset, $(field.name:c)_);
    offset += sizeof (uint16_t);
.   elsif type = "long"
    put_uint32 (args + offset, $(field.name:c)_);
    offset += sizeof (uint32_t);
.   elsif type = "longlong"
    put_uint64 (args + offset, $(field.name:c)_);
    offset += sizeof (uint64_t);
.   elsif type = "timestamp"
    put_uint64 (args + offset, $(field.name:c)_);
    offset += sizeof (uint64_t);
.   elsif type = "shortstr"
    put_uint8 (args + offset, $(field.name:c)_.size);
    offset += sizeof (uint8_t);
    memcpy (args + offset, $(field.name:c)_.data, $(field.name:c)_.size);
    offset += $(field.name:c)_.size;
.   elsif type = "longstr"
    put_uint32 (args + offset, $(field.name:c)_.size);
    offset += sizeof (uint32_t);
    memcpy (args + offset, $(field.name:c)_.data, $(field.name:c)_.size);
    offset += $(field.name:c)_.size;
.   elsif type = "table"
    put_field_table (args, amqp09::frame_min_size, offset, $(field.name:c)_);
.   else
    assert (0);
.   endif
.endmacro
.
.output "amqp09_constants.hpp"
/*
    Copyright (c) 2007-2008 FastMQ Inc.

    This file is part of 0MQ.

    0MQ is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    0MQ is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    This file is generated from $(arg?filename) by $(script) using GSL/4.
*/

#ifndef __ZMQ_AMQP09_CONSTANTS_HPP_INCLUDED__
#define __ZMQ_AMQP09_CONSTANTS_HPP_INCLUDED__

namespace zmq
{

    namespace amqp09
    {
        enum {
.for constant
            $(constant.name:c) = $(constant.value),
.endfor
.for class where name <> "message"
            $(class.name:c) = $(class.index),
.endfor
.for class where name <> "message"
.   for method
            $(class.name:c)_$(method.name:c) = $(method.index),
.   endfor
.endfor
        };
    }

}

#endif
.close
.output "i_amqp09.hpp"
/*
    Copyright (c) 2007-2008 FastMQ Inc.

    This file is part of 0MQ.

    0MQ is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    0MQ is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    This file is generated from $(arg?filename) by $(script) using GSL/4.
*/

#ifndef __ZMQ_I_AMQP09_HPP_INCLUDED__
#define __ZMQ_I_AMQP09_HPP_INCLUDED__

#include <assert.h>
#include <map>
#include <string>

namespace zmq
{

    struct i_amqp09
    {
        struct shortstr_t
        {
            inline shortstr_t () :
                data (NULL),
                size (0)
            {
            }

            inline shortstr_t (const char *data_) :
                data (data_)
            {
                size_t len = strlen (data);
                assert (len <= 0xff);
                size = len;
            }

            const char *data;
            uint8_t size;
        };

        struct longstr_t
        {
            inline longstr_t () :
                data (NULL),
                size (0)
            {
            }

            inline longstr_t (const void *data_, uint32_t size_) :
                data (data_),
                size (size_)
            {
            }

            const void *data;
            uint32_t size;
        };

        typedef std::map<std::string, std::string> field_table_t;

        //  The destructor shouldn't be virtual, however, not defining it as
        //  such results in compiler warnings with some compilers.
        virtual ~i_amqp09 () {};

.for class where name <> "message"
.   for method
        inline virtual void $(class.name:c)_$(method.name:c) (\
.       bit_offset = 0
.       for field

.               add_field_format ()
$(field.name:c)_$(last ()??''?',')\
.       endfor
)
        {
            unexpected ();
        }

.   endfor
.endfor
        virtual void unexpected () = 0;
    };

}

#endif
.close
.output "amqp09_unmarshaller.hpp"
/*
    Copyright (c) 2007-2008 FastMQ Inc.

    This file is part of 0MQ.

    0MQ is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    0MQ is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    This file is generated from $(arg?filename) by $(script) using GSL/4.
*/

#ifndef __ZMQ_AMQP09_UNMARSHALLER_HPP_INCLUDED__
#define __ZMQ_AMQP09_UNMARSHALLER_HPP_INCLUDED__

#include "i_amqp09.hpp"
#include "amqp09_constants.hpp"

namespace zmq
{

    class amqp09_unmarshaller_t
    {
    public:

        inline amqp09_unmarshaller_t (i_amqp09 *amqp_) :
            amqp (amqp_)
        {
        }

        inline ~amqp09_unmarshaller_t ()
        {
        }

        void write (uint16_t class_id, uint16_t method_id,
            unsigned char *args, size_t args_size);

    private:

        void get_field_table (unsigned char *args, size_t args_size,
            size_t offset, i_amqp09::field_table_t &table_);

        i_amqp09 *amqp;
    };

}
#endif
.close
.output "amqp09_unmarshaller.cpp"
/*
    Copyright (c) 2007-2008 FastMQ Inc.

    This file is part of 0MQ.

    0MQ is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    0MQ is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    This file is generated from $(arg?filename) by $(script) using GSL/4.
*/

#include "amqp09_unmarshaller.hpp"
#include "wire.hpp"

void zmq::amqp09_unmarshaller_t::write (uint16_t class_id,
            uint16_t method_id, unsigned char *args, size_t args_size)
{
    size_t offset = 0;

    switch (class_id) {
.for class where name <> "message"
    case amqp09::$(class.name:c):
        switch (method_id) {
.   for method
        case amqp09::$(class.name:c)_$(method.name:c):
            {
.       for field
.           get_field ()
.       endfor

                amqp->$(class.name:c)_$(method.name:c) (\
.       for field

                    $(field.name:c)$(last ()??''?',')\
.       endfor
);

                return;
            }
.   bit_offset = 0
.   endfor
        }
.endfor
    }
}

void zmq::amqp09_unmarshaller_t::get_field_table (unsigned char *args,
    size_t args_size, size_t offset, i_amqp09::field_table_t &table_)
{
    table_.clear ();
    uint32_t table_size = get_uint32 (args + offset);
    offset += sizeof (uint32_t);
    size_t pos = 0;
    while (pos != table_size) {
        uint8_t field_name_string_size = get_uint8 (args + offset);
        offset += sizeof (uint8_t);
        std::string field_name ((const char*) (args + offset),
            field_name_string_size);
        offset += field_name_string_size;
        uint8_t field_type = get_uint8 (args + offset);
        offset += sizeof (uint8_t);
        std::string field_value;
        switch (field_type) {
        case 'S':
            {
                uint32_t field_value_string_size = get_uint32 (args + offset);
                offset += sizeof (uint32_t);
                field_value.assign ((const char*) (args + offset),
                    field_value_string_size);
                offset += field_value_string_size;
                pos += (sizeof (uint8_t) + field_name.size () +
                    sizeof (uint8_t) + sizeof (uint32_t) + field_value.size());
                break;
            }
        default:
            assert (0);
        }    
        table_ [field_name] = field_value;
    }
}
.close
.output "amqp09_marshaller.hpp"
/*
    Copyright (c) 2007-2008 FastMQ Inc.

    This file is part of 0MQ.

    0MQ is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    0MQ is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    This file is generated from $(arg?filename) by $(script) using GSL/4.
*/

#ifndef __ZMQ_AMQP09_MARSHALLER_HPP_INCLUDED__
#define __ZMQ_AMQP09_MARSHALLER_HPP_INCLUDED__

#include <queue>

#include "i_amqp09.hpp"
#include "i_signaler.hpp"

namespace zmq
{

    class amqp09_marshaller_t : public i_amqp09
    {
    public:

        struct command_t
        {
            uint16_t class_id;
            uint16_t method_id;
            unsigned char *args;
            size_t args_size;
        };

        amqp09_marshaller_t (i_signaler *signaler_);
        ~amqp09_marshaller_t ();

.for class where name <> "message"
.   for method
        void $(class.name:c)_$(method.name:c) (\
.       bit_offset = 0
.       for field

.               add_field_format ()
$(field.name:c)_$(last ()??''?',')\
.       endfor
);

.   endfor
.endfor
        bool read (command_t *command);

    private:

        void unexpected ();
        void put_field_table (unsigned char *args, size_t args_size,
            size_t &offset,const i_amqp09::field_table_t &table_);

        std::queue <command_t> command_queue;
        i_signaler *signaler;
    };

}

#endif
.close
.output "amqp09_marshaller.cpp"
/*
    Copyright (c) 2007-2008 FastMQ Inc.

    This file is part of 0MQ.

    0MQ is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    0MQ is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    This file is generated from $(arg?filename) by $(script) using GSL/4.
*/

#include "amqp09_marshaller.hpp"
#include "amqp09_constants.hpp"
#include "wire.hpp"

zmq::amqp09_marshaller_t::amqp09_marshaller_t (i_signaler *signaler_) :
    signaler (signaler_)
{
}

zmq::amqp09_marshaller_t::~amqp09_marshaller_t ()
{
    while (!command_queue.empty ()) {
        free (command_queue.front ().args);
        command_queue.pop ();
    }
}

.for class where name <> "message"
.   for method
void zmq::amqp09_marshaller_t::$(class.name:c)_$(method.name:c) (\
.       bit_offset = 0
.       for field

.               add_field_format ()
$(field.name:c)_$(last ()??''?',')\
.       endfor
)
{
    unsigned char *args = (unsigned char*) malloc (amqp09::frame_min_size);
    assert (args);

    size_t offset = 0;
.           bit_offset = 0
.           for field
.               put_field ()
.           endfor
.           put_padding ()

    command_t cmd = {
        amqp09::$(class.name:c),
        amqp09::$(class.name:c)_$(method.name:c),
        args,
        offset
    };
    command_queue.push (cmd);
    signaler->signal (0);
}

.   bit_offset = 0
.   endfor
.endfor
bool zmq::amqp09_marshaller_t::read (command_t *command)
{
    if (command_queue.empty ())
        return false;

    *command = command_queue.front ();
    command_queue.pop ();
    return true;
}

void zmq::amqp09_marshaller_t::unexpected ()
{
    assert (0);
}

void zmq::amqp09_marshaller_t::put_field_table (
    unsigned char *args, size_t args_size, size_t &offset,
    const i_amqp09::field_table_t &table_)
{
    offset += sizeof (uint32_t);
    size_t table_size = 0;

    for (i_amqp09::field_table_t::const_iterator table_it = table_.begin();
          table_it != table_.end(); table_it++ ) {

        put_uint8 (args + offset, table_it->first.size ());
        offset += sizeof (uint8_t);
        memcpy (args + offset, table_it->first.c_str (),
           table_it->first.size ());
        offset += table_it->first.size ();
        put_uint8 (args + offset, 'S');
        offset += sizeof (uint8_t);
        put_uint32 (args + offset, table_it->second.size ());
        offset += sizeof (uint32_t);
        memcpy (args + offset, table_it->second.c_str (),
            table_it->second.size ());
        offset += table_it->second.size ();
        table_size += (sizeof (uint8_t) + table_it->first.size () +
            sizeof (uint8_t) + sizeof (uint32_t) +
            table_it->second.size ());
    }
    put_uint32 (args + offset - table_size - sizeof (uint32_t), table_size);
}
.close
