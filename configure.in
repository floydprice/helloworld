#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
AC_PREREQ(2.61)
AC_INIT([zmq],[dev])
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(libzmq/zmq/config.h)
AM_CONFIG_HEADER(libzmq/zmq/platform.hpp)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)

AM_PROG_CC_C_O

# Enable to create shared libs under Win32
AC_LIBTOOL_WIN32_DLL

# Checks for programs.
AC_PROG_CXX
AC_PROG_LIBTOOL

# Checks for libraries.
AC_CHECK_LIB(pthread, pthread_create)

# Host speciffic checks
AC_CANONICAL_HOST

case "${host_os}" in
    *linux*)
        AC_DEFINE(ZMQ_HAVE_LINUX, 1, [Have Linux OS])
        CPPFLAGS="-D_REENTRANT $CPPFLAGS"
        sed < libtool > libtool-2 \
        's/^hardcode_libdir_flag_spec.*$'/'hardcode_libdir_flag_spec=" "/'
        mv libtool-2 libtool
        chmod 755 libtool
        ;;
    *solaris*)
        AC_DEFINE(ZMQ_HAVE_SOLARIS, 1, [Have Solaris OS])
        AC_CHECK_LIB(socket, main)
        AC_CHECK_LIB(nsl, main)
        AC_CHECK_LIB(rt, main)
        CPPFLAGS="-D_REENTRANT -D_PTHREADS $CPPFLAGS"
        ;;
    *freebsd*)
        AC_DEFINE(ZMQ_HAVE_FREEBSD, 1, [Have FreeBSD OS])
        CPPFLAGS="-D_THREAD_SAFE $CPPFLAGS"
        LIBS="-pthread"
        ;;
    *darwin*)
        AC_DEFINE(ZMQ_HAVE_OSX, 1, [Have DarwinOSX OS])
        LIBS="-pthread"
        ;;
    *openbsd*)
        AC_DEFINE(ZMQ_HAVE_OPENBSD, 1, [Have OpenBSD OS])
        CPPFLAGS="-pthread $CPPFLAGS"
        LIBS="-pthread"
        ;;
    *nto-qnx*)
        AC_DEFINE(ZMQ_HAVE_QNXNTO, 1, [Have QNX Neutrino OS])
        CPPFLAGS="-D_THREAD_SAFE $CPPFLAGS"
        AC_CHECK_LIB(socket,main)
        ;;
    *aix*)
        AC_DEFINE(ZMQ_HAVE_AIX, 1, [Have AIX OS])
        if test "x$GXX" = "xyes"; then
          CPPFLAGS="-D_THREAD_SAFE $CPPFLAGS"
        fi
        ;;
    *hpux*)
        AC_DEFINE(ZMQ_HAVE_HPUX, 1, [Have HPUX OS])
        if test "x$GXX" = "xyes"; then
          CPPFLAGS="-D_THREAD_SAFE $CPPFLAGS"
        fi
        AC_CHECK_LIB(rt, main)
        sed < libtool > libtool-2 \
        's/^hardcode_libdir_flag_spec.*$'/'hardcode_libdir_flag_spec=" "/'
        mv libtool-2 libtool
        chmod 755 libtool
        ;;
    *mingw32*)
        AC_DEFINE(ZMQ_HAVE_WINDOWS, 1, [Have Windows OS])
        AC_DEFINE(ZMQ_HAVE_MINGW32, 1, [Have MinGW32])
        AC_CHECK_HEADERS(windows.h)
        LIBS="-lwsock32 -lws2_32 -no-undefined"
        CFLAGS="-std=c99"
        ;;
    *)
        AC_MSG_ERROR([Not supported os: $host.])
        ;;
esac

# Check if we are running at sparc harware
AC_MSG_CHECKING([wheter __sparc__ is defined])
AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
    [[#if defined __sparc__
        //OK we are on sparc
    #else
        error: we are not on sparc
    #endif
    ]])],
        [sparc=yes],
        [sparc=no])

AC_MSG_RESULT([$sparc])
        
if test "x$sparc" = "xyes"; then
    CPPFLAGS="$CPPFLAGS -mcpu=v9"
fi

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(errno.h arpa/inet.h netinet/tcp.h netinet/in.h stddef.h stdlib.h string.h sys/socket.h sys/time.h unistd.h limits.h)

# Use c++ in subsequent tests
AC_LANG(C++)

# Optional stuff
perf="no"
AC_ARG_WITH([perf], [AS_HELP_STRING([--with-perf], [build performance tests [default=no]])], [with_perf=yes], [with_perf=no])
cpu_estimator="no"
time_measure="gettime"

# performance measuring framework (perf)
if test "x$with_perf" != "xno"; then
    perf="yes"

    case "${host_os}" in
        *openbsd*)
            AC_CHECK_LIB(m, main)
            ;;
        *nto-qnx*)
            AC_CHECK_LIB(m, main)
            ;;
    esac

    # Test for __GNUC__ && (__i386__ || __x86_64__) macros
    AC_MSG_CHECKING([wheter rtdsc can be used])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
        [[#if (defined (__GNUC__) && (defined (__i386__) || defined (__x86_64__)))
            //OK we can use rtdsc
          #else
            error: we can not use rtdsc
          #endif
        ]])],
            [rtdsc=yes],
            [rtdsc=no])
    AC_MSG_RESULT([$rtdsc])

    # To built cpu frequency estimator we need librt && rtdsc
    if test "x$rtdsc" = "xyes"; then
        cpu_estimator="yes"
    fi

    # Test for PERF_CPU_FREQUENCY macro
    AC_MSG_CHECKING([wheter PERF_CPU_FREQUENCY is defined])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
        [[#ifdef PERF_CPU_FREQUENCY
            //OK
          #else
            error: PERF_CPU_FREQUENCY is not defined
          #endif
        ]])],
            [perf_cpu_freq=yes],
            [perf_cpu_freq=no])
    AC_MSG_RESULT([$perf_cpu_freq])

    if test "x$perf_cpu_freq" = "xyes" -a "x$rtdsc" = "xyes"; then
        time_measure="rtdsc"
    fi

fi

# Camera example
camera="no"
AC_ARG_WITH([camera], [AS_HELP_STRING([--with-camera], [build camera example [default=no]])], [with_camera=yes], [with_camera=no])
if test "x$with_camera" != "xno"; then

    #  check for pkg-config
    AC_CHECK_PROG(have_pkg_config, pkg-config, yes, no)
    if test "x$have_pkg_config" != "xyes"; then
        AC_MSG_ERROR([To run configure with --with-camera option, pkg-config has to be installed.]);
    fi
    
    PKG_CHECK_MODULES([SDL], [sdl]) 
    AC_SUBST(SDL_LIBS)
    AC_SUBST(SDL_CFLAGS)

    PKG_CHECK_MODULES([UNICAP], [libunicap]) 
    AC_SUBST(UNICAP_LIBS)
    AC_SUBST(UNICAP_CFLAGS)

    PKG_CHECK_MODULES([UCIL], [libucil]) 
    AC_SUBST(UCIL_LIBS)
    AC_SUBST(UCIL_CFLAGS)

    camera="yes"
fi

# Exchange example
exchange="no"
AC_ARG_WITH([exchange], [AS_HELP_STRING([--with-exchange], [build exchange example [default=no]])], [with_exchange=yes], [with_exchange=no])
if test "x$with_exchange" != "xno"; then
    exchange="yes"
fi

# Chat example
chat="no"
AC_ARG_WITH([chat], [AS_HELP_STRING([--with-chat], [build chatroom example [default=no]])], [with_chat=yes], [with_chat=no])
if test "x$with_chat" != "xno"; then
    chat="yes"
fi

# Other language bindings
# C
czmq="no"
AC_ARG_WITH([c], [AS_HELP_STRING([--with-c], [build c language binding [default=no]])], [with_c=yes], [with_c=no])
if test "x$with_c" != "xno"; then
    czmq="yes"
fi

# Python
pyzmq="no"
AC_ARG_WITH([python], [AS_HELP_STRING([--with-python], [build Python language binding [default=no]])], [with_python=yes], [with_python=no])
if test "x$with_python" != "xno"; then
    AM_PATH_PYTHON([2.4], , [:])
    if test "x$PYTHON" = "x:"; then
        AC_MSG_ERROR([To run configure with --with-python option, Python has to be installed.]);
    fi

    py_prefix=`$PYTHON -c "import sys; print sys.prefix"`
    py_exec_prefix=`$PYTHON -c "import sys; print sys.exec_prefix"`
    PYTHON_INCLUDES="-I${py_prefix}/include/python${PYTHON_VERSION}"
    if test "$py_prefix" != "$py_exec_prefix"; then
        PYTHON_INCLUDES="$PYTHON_INCLUDES -I${py_exec_prefix}/include/python${PYTHON_VERSION}"
    fi
    AC_SUBST(PYTHON_INCLUDES)

    AC_CHECK_HEADERS($py_prefix/include/python${PYTHON_VERSION}/Python.h, [] , [AC_MSG_ERROR([To run configure with --with-python option, Python.h has to be installed.])])

    pyzmq="yes"
fi

# Java
jzmq="no"
AC_ARG_WITH([java], [AS_HELP_STRING([--with-java], [build Java language binding [default=no]])], [with_java=yes], [with_java=no])
if test "x$with_java" != "xno"; then
    AC_PATH_PROG(JAVAC, javac, "no")
    AC_PATH_PROG(JAVAH, javah, "no")

    if test "x$JAVA_HOME" = "x"; then
        AC_MSG_ERROR([To run configure with --with-java, please set the JAVA_HOME variable to your JDK environment.]);
    fi

    AC_MSG_CHECKING([for jni.h in a $JAVA_HOME/include dir])
    if test -f $JAVA_HOME/include/jni.h; then
        AC_MSG_RESULT([yes])
    else
        AC_MSG_ERROR([Could not find jni.h in $JAVA_HOME/include directory.]);
    fi
    
    JAVAROOT=./
    AC_SUBST(JAVAROOT)

    case "${host_os}" in
        *solaris*)
            JAVA_INCLUDE="-I.. -I${JAVA_HOME}/include -I ${JAVA_HOME}/include/solaris"
        ;;
        *openbsd*)
            JAVA_INCLUDE="-I.. -I${JAVA_HOME}/include -I ${JAVA_HOME}/include/openbsd"
        ;;
        *)
            JAVA_INCLUDE="-I.. -I${JAVA_HOME}/include -I ${JAVA_HOME}/include/linux"
        ;;
    esac

    AC_SUBST(JAVA_INCLUDE)

    jzmq="yes"
else
# Workaround to be able to run make dist without real JAVAH
    JAVAH=true
    JAVAC=true
fi

#  zmq_server
zmq_server="yes"
AC_ARG_WITH([zmq_server], [AS_HELP_STRING([--with-zmq_server], [build zmq_server [default=yes]])], [with_zmq_server=yes], [])
if test "x$with_zmq_server" = "xno"; then
    zmq_server="no"
fi

AM_CONDITIONAL(BUILD_PERF, test "x$perf" = "xyes") 
AM_CONDITIONAL(BUILD_CAMERA, test "x$camera" = "xyes") 
AM_CONDITIONAL(BUILD_EXCHANGE, test "x$exchange" = "xyes")
AM_CONDITIONAL(BUILD_CPU_ESTIMATOR, test "x$cpu_estimator" = "xyes")
AM_CONDITIONAL(BUILD_CHAT, test "x$chat" = "xyes")
AM_CONDITIONAL(BUILD_C, test "x$czmq" = "xyes")
AM_CONDITIONAL(BUILD_PYTHON, test "x$pyzmq" = "xyes")
AM_CONDITIONAL(BUILD_JAVA, test "x$jzmq" = "xyes")
AM_CONDITIONAL(BUILD_ZMQ_SERVER, test "x$zmq_server" = "xyes")

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_HEADER_TIME
AC_TYPE_UINT32_T
AC_C_VOLATILE

# Substs
stdint="0"
if test "x$HAVE_STDINT_H" = "xyes"; then
    stdint="1"
fi

inttypes="0"
if test "x$HAVE_INTTYPES_H" = "xyes"; then
    inttypes="1"
fi

AC_SUBST(stdint)
AC_SUBST(inttypes)

# Checks for library functions.
AC_FUNC_MALLOC
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(perror gettimeofday memset socket getifaddrs freeifaddrs)

AC_OUTPUT(Makefile libzmq/Makefile libczmq/Makefile libpyzmq/Makefile \
libjzmq/Makefile perf/Makefile perf/tests/Makefile perf/tests/zmq/Makefile \
examples/Makefile examples/exchange/Makefile examples/camera/Makefile \
perf/tests/tcp/Makefile perf/helpers/Makefile examples/chat/Makefile \
man/Makefile zmq_server/Makefile)

AC_MSG_RESULT([])
AC_MSG_RESULT([ ******************************************************** ])
AC_MSG_RESULT([                         0MQ     ])
AC_MSG_RESULT([ ******************************************************** ])
AC_MSG_RESULT([  This software is distributed under the terms and ])
AC_MSG_RESULT([  conditions of the LESSER GNU GENERAL PUBLIC LICENSE. ])
AC_MSG_RESULT([  See the file COPYING and COPYING.LESSER for the full ])
AC_MSG_RESULT([  license text. ])
AC_MSG_RESULT([ ******************************************************** ])
AC_MSG_RESULT([])
AC_MSG_RESULT([ libzmq install dir: $prefix])
AC_MSG_RESULT([])
AC_MSG_RESULT([ Utilities:])
AC_MSG_RESULT([   zmq_server: $zmq_server])
AC_MSG_RESULT([   cpu frequency estimator: $cpu_estimator])
AC_MSG_RESULT([])
AC_MSG_RESULT([ Addons:])
AC_MSG_RESULT([   performance tests: $perf ($time_measure)]) 
AC_MSG_RESULT([   camera example: $camera])
AC_MSG_RESULT([   stock exchange example: $exchange])
AC_MSG_RESULT([   chartoom example: $chat])
AC_MSG_RESULT([])
AC_MSG_RESULT([   C language binding: $czmq])
AC_MSG_RESULT([   Python language binding: $pyzmq])
AC_MSG_RESULT([   Java language binding: $jzmq])
AC_MSG_RESULT([])

