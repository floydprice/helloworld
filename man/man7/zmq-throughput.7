.TH zmq-throughput 7 "23. march 2009" "(c)2007-2009 FastMQ Inc." "0MQ perf User Manuals"
.SH NAME
0MQ throughput scenario
.SH THROUGHPUT SCENARIO
To compute throughput messages are sent as fast as possible from one component 
and received as fast as possible by another component. The overall time taken 
to receive all the messages serves as the base for throughput computation. 
The assumption is that the throughput on receiver side reflects all the 
bottlenecks on the path from the sender to the receiver and therefore is the 
most appropriate measure of performance. Figure shows detailed implementation 
of this kind of scenario:
.PP
\f(CR
.nf
                         *******************
                         *    zmq_server   *
                         *******************

    *******[ local ]*******                *******[ remote ]******
    *                     *                *                     *
    * args: message size  *                * args: message size  *
    *       message count *<===============*       message count *
    * scenario: thr       *                * scenario: thr       *
    * transport: 0MQ, TCP *                * transport: 0MQ, TCP *
    *                     *                *                     *
    ***********************                ***********************
              |
              |
              V
           tests.dat file
.fi
\fP
.PP
.I remote
.RS 4
Executable that calls scenario function \fBremote_thr\fR with chosen transport.
.RE
.PP
.I local 
.RS 4
Executable that calls scenario function \fBlocal_thr\fR with chosen transport.
.RE
.PP
.I tests.dat
.RS 4
Output file local program will add one line to. The format of the line is: 1,
message count, size of the message [B], test time [ms], throughput [msg/s], 
throughput [Mb/s].
.RE

.SH EXAMPLE
First, you have to choose which transport mechanism you are going to use. 
Check transports directory for the available transports. You can write your own
transport if none of the existing suits you. In this example, we chose 0MQ to 
be our transport mechanism.
.PP
Choose number of messages to be transported from remote (publisher) to local 
(subscriber) side and the size of the message. We will run this scenario with 
message 6 byte long and message count of 500000.
.PP
In this example we will use two physical hosts. The host running 'local' 
program has IP address 10.0.0.1; the host running 'remote' has IP address 
10.0.0.2.
.PP
Note that 0MQ transport needs \fBzmq_server\fR(1) running somewhere on the 
network. In our case \fBzmq_server\fR(1) will be running on host 10.0.0.1.
.SS Writing 'local'
Create a source file (say local.cpp), include the appropriate header files, 
one containing throughput scenario, other one for 0MQ transport. Paths to 
header files may depend on your installation:
.RS 4
\f(CR
.nf
#include "perf/transports/zmq_transport.hpp"
#include "perf/tests/scenarios/thr.hpp"

int main (void)
{
    return 0;
}
.fi
\fP
.RE
.PP
In the main routine you should initialise transport and call appropriate 
function (local_thr) from the scenario header file (thr.hpp). Looking at 0MQ 
transport object you'll find out that you need to supply following information 
when initialising it:
.PP
.RS 4
* Hostname or IP address of the zmq_server? (10.0.0.1)
.br
* Bind to existing exchange and queue or to create them by itself? (create)
.br
* What is the name of exchange being created? (E0)
.br
* What is the name of queue being created? (Q0)
.br
* Which network interface should be used for exchange? (10.0.0.1:5672)
.br
* Which network interface should be used for queue? (10.0.0.1:5673)
.RE
.PP
When calling local_thr function from scenario header file thr.hpp following 
parameters should be known:
.PP
.RS 4
* What is the size of the message? (6B)
.br
* How many messages are going to be send / received? (50000)
.RE
.PP
Deciding on the initialisation arguments we can write the following code:
.RS 4
\f(CR
.nf
#include "perf/transports/zmq_transport.hpp"
#include "perf/tests/scenarios/thr.hpp"

int main (void) {

    const char *global_locator = "10.0.0.1";

    bool bind = false ; //  Create exchange & queue
    const char *queue_name = "Q0";
    const char *queue_iface = "10.0.0.1:5673";
    const char *exchange_name = "E0";
    const char *exchange_iface = "10.0.0.1:5672";

    int msg_count = 500000;
    size_t msg_size = 6;

    //  Initialise transport
    perf::i_transport *transport = new perf::zmq_t (global_locator, 
        bind, exchange_name, queue_name, exchange_iface, queue_iface);

    //  Do the job
    perf::local_thr (transport, msg_size, msg_count);

    return 0;
}
.fi
\fP
.RE
.SS Writing 'remote'
Similarly to 'local' program, you should initialise transport and call 
appropriate function (remote_thr) from the scenario header file (thr.hpp) in
the main routine of 'remote' . The transport has to be the same for local and
remote. To initialize transport we need following information:
.PP
.RS 4
* Hostname or IP address of the zmq_server? (10.0.0.1)
.br
* Bind to existing exchange and queue or to create them by itself? (bind to existing)
.br
* What is the name of exchange to bind to? (E0)
.br
* What is the name of queue to bind? (Q0)
.RE
.PP
When calling remote_thr function from scenario header file thr.hpp following 
parameters should be known:
.PP
.RS 4
* What is the size of the message? (6B)
.br
* How many messages are going to be received/send? (50000)
.RE
.PP
Now you can write the 'remote' program. Create a source file (say remote.cpp), 
include the appropriate header files (one containing latency scenario, other 
one for 0MQ transport). Initialize transport and call proper function from 
scenario header file (note that paths to header files may depend on your 
installation):
.RS 4
\f(CR
.nf
#include "perf/transports/zmq_transport.hpp"
#include "perf/tests/scenarios/thr.hpp"

int main (void) {

    const char *global_locator = "10.0.0.1";

    bool bind = true ; //  bind to exchange & queue
    const char *queue_name = "Q0";
    const char *exchange_name = "E0";

    int msg_count = 500000;
    size_t msg_size = 6;

    //  Initialise transport
    perf::i_transport *transport = new perf::zmq_t (global_locator, 
        bind, exchange_name, queue_name, NULL, NULL);

    //  Do the job
    perf::remote_thr (transport, msg_size, msg_count);

    return 0;
}
.fi
\fP
.RE
.SS Compiling the scenario
In a case of identical hosts we can compile both binaries on a single host and 
distribute it to the other host afterwards. Otherwise we have to build it on 
both system independently.
.PP
Compilation options depend on used transport. According to 
\fBzmq-transport\fR(7) build specifications it is necessary to link with 
pthreads and 0MQ library. For g++ compiler and 0MQ transport local.cpp and 
remote.cpp should be compiled in following way (note that 0MQ libraries and 
header files has to be installed):
.RS 4
\f(CR
.nf
$ g++ local.cpp -o local -lpthread -lzmq
$ g++ remote.cpp -o remote -lpthread -lzmq
.fi
\fP
.RE
.SS Running the scenario
To run the scenario, \fBzmq_server\fR(1) has to be started first on local host 
(10.0.0.1):
.RS 4
\f(CR
.nf
$ zmq_server
.fi
\fP
.RE
Start the local binary on local host (10.0.0.1):
.RS 4
\f(CR
.nf
$ ./local
.fi
\fP
.RE
Then start the remote binary on the remote machine:
.RS 4
\f(CR
.nf
$ ./remote
.fi
\fP
.RE
Output from local binary will display average throughput in [msg/s] and [Mb/s]:
.RS 4
\f(CR
.nf
Your average throughput is 1941551 [msg/s]
Your average throughput is 93 [Mb/s]
.fi
\fP
.RE
.SS Postprocessing
For statistical postprocessing throughput scenario creates tests.dat file on 
the local side. Each test run adds separate line to the file.
.RS 4
\f(CR
.nf
$ more tests.dat
1,500000,6,257,1941551,93
.fi
\fP
.RE
Columns are arranged as follows: 1, message count, size of the message [B], 
test time [ms], throughput [msg/s], throughput [Mb/s].
.PP
Note that average throughput [Mb/s] is average "payload" throughput, i.e. 
message headers are not taken into account. Check \fBzmq-transport\fR(7) for 
more information.
.SH "SEE ALSO"
.BR zmq_server (1), 
.BR zmq\-transport (7), 
.BR zmq\-latency (7)
.SH AUTHOR
Pavol Malosek <malosek at fastmq dot com>
