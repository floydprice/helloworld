.TH zmq::api_thread_t 3 "" "(c)2007-2009 FastMQ Inc." "0MQ User Manuals"
.SH NAME
zmq::api_thread_t \- proxy object for the application thread
.SH SYNOPSIS
\fB
.nf
#include <zmq.hpp>

namespace zmq
{
    enum scope_t
    {
        scope_local,
        scope_process,
        scope_global
    };

    enum style_t
    {
        style_data_distribution,
        style_load_balancing
    };

    enum
    {
        no_limit,
        no_swap
    };

    class api_thread_t
    {
        static api_thread_t *create (dispatcher_t *dispatcher, i_locator *locator);
        void mask (uint32_t notifications);
        int create_exchange (
            const char *name,
            scope_t scope = scope_local,
            const char *location = NULL,
            poll_thread_t *listener_thread = NULL,
            int handler_thread_count = 0,
            poll_thread_t **handler_threads = NULL,
            style_t style = style_data_distribution);
        int create_queue (
            const char *name,
            scope_t scope_ = scope_local,
            const char *location = NULL,
            poll_thread_t *listener_thread = NULL,
            int handler_thread_count = 0,
            poll_thread_t **handler_threads = NULL,
            int64_t hwm = no_limit,
            int64_t lwm = no_limit,
            int64_t swap = no_swap);
        void bind (
            const char *exchange_name,
            const char *queue_name,
            poll_thread_t *exchange_thread,
            poll_thread_t *queue_thread,
            const char *exchange_options = NULL,
            const char *queue_options = NULL);
        bool send (int exchange, message_t &message, bool block = true);
        bool presend (int exchange, message_t &message, bool block = true);
        void flush ();
        int receive (message_t *message, bool block = true);
    };
}
.fi
\fP
.SH DESCRIPTION
The API thread is a proxy for an application thread to access 0MQ functionality.
For each of your application threads that needs to use 0MQ you should create
an instance of the api_thread class.
.SH ENUMS
.IP "\fBscope_local\fP"
Local scope means that the object (exchange or queue) is visible only within
the engine that created it.
.IP "\fBscope_process\fP"
Process scope means that the object is visible to all the engines within
the process registered with the same dispatcher object.
.IP "\fBscope_global\fP"
Global scope means that the object is visible to all the 0MQ processes
registered with the same
.BR zmq_server (1).
.SH METHODS
.IP "\fBstatic api_thread_t *create (dispatcher_t *dispatcher, i_locator *locator)\fP"
Creates an API thread and plugs it into the supplied
.IR dispatcher
object. Note that you don't destroy the API thread manually.
Rather it'll be destroyed when the
.IR dispatcher
it is attached to is destroyed.  The
.IR locator
argument specifies the locator object to use when registering and looking
for objects (exchanges and queues).
.IP "\fBvoid mask (uint32_t notifications)\fP
This function allows you to specify what messages are to be received.
By default only standard data messages are received. Check
.IR message_t
manpage for different types of messages. Combine individual message types
you want to receive using binary OR operator to get
.IR notifications
argument. Receiving data messages cannot be switched off.
.IP "\fBint create_exchange (const char *name, scope_t scope = scope_local, const char *location = NULL, poll_thread_t *listener_thread = NULL, int handler_thread_count = 0, poll_thread_t **handler_threads = NULL, style_t style = style_data_distribution)\fP
Creates an exchange. The name of the exchange to create is specified by the
.IR name
parameter.  The
.IR scope
parameter specifies visibility of the exchange (see
.IR scope_t
enumeration above). If the exchange is being created with local or process
scope, subsequent parameters except of
.IR style
do not need to be specified. If it is created with
global scope they are mandatory.  The
.IR location
parameter specifies the netowrk location of this exchange.  It is either
the IP address of the NIC or its symbolic name. '*' stands for 'all interfaces'.
In this case, interface to use will be chosen by the operating system.
Optionally, the port can be specified this way: 'eth0:5555'. If the port is not
specified, an unused port will automatically be used.  The
.IR listener_thread
parameter specifies which I/O thread should process connection requests
(when other parties are binding to this exchange). Once the connection
is established the traffic will be handled by one of the I/O threads supplied
in the
.IR handler_threads
array.  The size of the array is specified by the
.IR handler_thread_count
parameter. Newly created connections are distributed between handler threads
in a round-robin manner.
.IR style
argument specifies the algorithm the exchange should use to distribute messages
to the bound queues.
.IR style_data_distribution
means that each message is sent to all the bound queues.
.IR style_load_balancing
means that each message is sent to exactly one queue. Messages are distributed
among the queues in round-robin fashion.
.IP "\fBint create_queue (const char *name, scope_t scope = scope_local, const char *location = NULL, poll_thread_t *listener_thread = NULL, int handler_thread_count = 0, poll_thread_t **handler_threads = NULL, int64_t hwm = no_limit, int64_t lwm = no_limit, int64_t swap = no_swap)\fP
Creates a queue. The name of the queue to create is specified by the
.IR name
parameter.  The
.IR scope
parameter specifies the visibility of the queue (see
.IR scope_t
the enumeration above). If the queue is being created with local or process
scope, subsequent parameters except
.IR hwm
, 
.IR lwm
and
.IR swap
do not need to be specified. If it is created
with global scope they are mandatory.  The
.IR location
parameter specifies the network location of the queue. It is either the IP
address of the NIC or its symbolic name. '*' stands for 'all interfaces'.
In this case, interface to use will be chosen by the operating system.
Optionally, the port can be specified this way: 'eth0:5555'. If the port
is not specified, an unused port will automatically be used.  The
.IR listener_thread
parameter specifies which I/O thread should process connection requests
(when other parties are binding to this queue). Once the connection
is established the traffic will be handled by one of the I/O threads
supplied in the
.IR handler_threads
array. The size of the array is specified by the
.IR handler_thread_count
parameter. Newly created connections are distributed between handler threads
in a round-robin manner.
.IR hwm
specifies the high water mark for the queue. When there is specified
number of messages in the queue it blocks and no more messages can be written
to it. Application attempting to write a message to the queue will be blocked
until number of messages in it drops below low water mark.
.IR hwm
equal to
.IR no_limit
means there's no limit on the number of messages in the queue.
.IR lwm
specifies low water mark for the queue. If the queue is blocked because
high watermark was reached, it becomes unblocked once the number of messages
in it drops below
.IR lwm .
If
.IR hwm
is set to
.IR no_limit
.IR lwm
paramter is ignored.
.IP "\fBvoid bind (const char *exchange_name, const char *queue_name, poll_thread_t *exchange_thread, poll_thread_t *queue_thread, const char *exchange_options = NULL, const char *queue_options = NULL)\fP
Binds the queue specified by
.IR queue_name
to the exchange specified by
.IR exchange_name .
Binding means that messages sent to the exchange will be forwarded to the queue.
If the
.IR exchange
is in a different process the
.IR exchange_thread
parameter specifies which I/O thread should be used to handle the network
traffic. If the
.IR queue
resides in a different process the
.IR queue_thread
parameter specifies which I/O thread should be used to handle the network
traffic.
.IR exchange_options
and
.IR queue_options
can contain additional information passed to exchange and queue engine.
Interpretation of these strings is dependent on the transport mechanism used.
.IP "\fBbool send (int exchange, message_t &message, bool block = true)\fP
Sends a message to exchange specified by the
.IR exchange
parameter. The exchange ID is the ID returned by the
.IR create_exchange
method. The
.IR message
object will be cleared in this function - it'll be 0-byte long message
after the call. If there are any pending pre-sent messages pending,
.IR send
will flush them immediately so that the correct message ordering
will be retained. If
.IR block
is set to true and message cannot be send (because queue limits are reached),
the function will block until the congestion is over. If
.IR block
is set to false, function returns false immediately if message cannot be sent.
If message is sent the function returns true.
.IP "\fBbool presend (int exchange, message_t &message, bool block = true)\fP"
Identical to
.IR send 
except that the message specified by the
.IR message
parameter won't be sent immediately, rather it'll wait till next call to
.IR flush
or
.IR send .
Presend can be used when there are several sends required in a single business
transaction. This way the processing can be made more efficient. For example,
0MQ 'exchange' example uses
.IR presend
to send all the replies (confirmation, trades, stock quotes) to a single stock
order in one go. Use
.IR presend
only if you are striving for messaging rates of 1,000,000 messages a second
or higher. For lower message rates the performance effect of presending is
almost unmeasurable.
.IP "\fBvoid flush ()\fP
Flushes all the pre-sent messages to their destinations (see
.IR presend
method).
.IP "\fBint receive (message_t *message, bool block = true)\fP"
Gets a message from 0MQ.  The message will be stored in the object pointed to by
.IR message
parameter.  The old content of the object will be destoyed silently. By default
(when the
.IR block
parameter is set to true) if no message is immediately available, this method
waits for the next message to arrive. If
.IR block
is false, the method returns immediately even if there is no message availabe.
The return value is the ID of the queue the message was received from
(queue ID is returned by the
.IR create_queue
method) or 0 in case no message was retrieved.
.SH EXAMPLE
.nf
#include <zmq.hpp>
using namespace zmq;

int main ()
{
    dispatcher_t dispatcher (2);
    locator_t locator ("localhost");
    i_thread *pt = poll_thread_t::create (&dispatcher);
    api_thread_t *api = api_thread_t::create (&dispatcher, &locator);
    int eid = api->create_exchange ("E", scope_global, "eth0", pt, 1, &pt);
    api->create_queue ("Q", scope_global, "eth0", pt, 1, &pt);
    api->bind ("E", "Q", pt, pt);

    message_t msg_out (10);
    memset (msg_out.data (), 0, msg_out.size ());
    api->send (eid, msg_out);

    message_t msg_in;
    api->receive (&msg_in);
}
.fi
.SH AUTHOR
Martin Sustrik <sustrik at fastmq dot com>
.SH "SEE ALSO"
.BR zmq::dispatcher_t (3),
.BR zmq::message_t (3),
.BR zmq::select_thread_t (3),
.BR zmq::poll_thread_t (3),
.BR zmq::epoll_thread_t (3),
.BR zmq::devpoll_thread_t (3),
.BR zmq::kqueue_thread_t (3)
