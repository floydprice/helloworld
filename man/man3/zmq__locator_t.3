.TH zmq::locator_t 3 "" "(c)2007-2009 FastMQ Inc." "0MQ User Manuals"
.SH NAME
zmq::locator_t \- class providing connectivity to
.BR zmq_server (1)
.SH SYNOPSIS
\fB
.nf
#include <zmq.hpp>

namespace zmq
{
    class locator_t
    {
        locator_t (const chat *hostname = NULL);
        ~locator_t ();
    };
}
.fi
\fP
.SH DESCRIPTION
The locator class provides connectivity to
.BR zmq_server (1).
It acts as a directory service for looking up non-private objects (exchanges
and queues).  The locator can be either connected to zmq_server in which case
global-scoped objects are available, or it can run without zmq_server which
means they are not available.  Process- and local-scoped objects are available
in both cases.
.SH METHODS
.IP "\fBlocator_t (const char *hostname = NULL)\fP"
Creates a locator. If
.IR hostname
is NULL it doesn't connect to zmq_server. If you want it to connect
.IR hostname
of the box where
.BR zmq_server (1)
is running should be supplied in form <host>[:<port>]. 'host' is either name
of the box or its IP address. So, for example, if zmq_server is running on box
called 'svr01' you set the
.IR hostname
parameter to 'svr01'. Default port used by zmq_server is 5682.
In case you've started
.BR zmq_server (1)
on different port - say 5555 - set the hostname this way 'svr01:5555'
or this way '192.168.0.45:5555'.
.IP "\fB~locator_t ()\fP"
Destroys the locator.
.SH EXAMPLE
.nf
#include <zmq.hpp>
using namespace zmq;

int main ()
{
    dispatcher_t dispatcher (2);
    locator_t locator ("svr01");
    poll_thread_t *pt = poll_thread_t::create (&dispatcher);
    api_thread_t *api = api_thread_t::create (&dispatcher, &locator);
}
.fi
.SH AUTHOR
Martin Sustrik <sustrik at fastmq dot com>
.SH "SEE ALSO"
.BR zmq_server (1),
.BR zmq_api_thread (3)
